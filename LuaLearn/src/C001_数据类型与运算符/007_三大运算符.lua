---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2021/1/13 14:02
---
--[[
三大运算符
    算数运算符： + - * / % ^
    关系运算符：< <= > >= == ~=
        注意：1、nil 只与其自身相等。
             2、对于table、函数、userdata，lua是作引用比较的。即：只有当它们引用同一个对象时，才认为他们相等
    逻辑运算符：and or not
        1：所有的逻辑运算符将false、nil视为假，其他都为真。
        2：对于操作符and来说，如果它第一个操作数为假，就返回第1个操作数，不然返回第2个操作数。（即：有假为假，全真为真)
        3：对于操作符or来说，如果它第1个操作数为真，就返回第1个操作数，不然返回第2个操作数。（即：有真为真，全假为假）
        短路规则and 逻辑假短路规则 or 逻辑真短路规则
        针对与带有”数字“与”字符串“的的逻辑判断使用短路规则（and 逻辑假短路规则 or 逻辑真短路规则）
多重赋值
    lua中可以给多个变量同时赋值。 eg：num1,num2,num3 = 1,2,3
    lua可以进行多重赋值。
        lua总是将等号右边值的个数调整到与左边变量个数相一致的情况
    规则：如果值的个数少于变量的个数，那么多余的变量会被赋值为nil，如果值的个数更多的话多余的值会被忽略掉。
]]
--算数运算符
num1 = 10
num2 = 3
res1 = num1 + num2; -- 输出：13
res2 = num1 - num2; -- 输出：7
res3 = num1 * num2; -- 输出：30
res4 = num1 / num2; -- 输出：3.3333333333333
res5 = num1 % num2; -- 输出：1
res6 = num1^num2;   -- 输出：1000
print("加法:",res1);
print("减法：",res2);
print("乘法：",res3);
print("除法：",res4);
print("取余：",res5);
print("次幂：",res6)
-- 关系运算符
print("num1 > num2:"..tostring(num1 > num2));   --输出： true
print("num1 > num2:"..tostring(num1 >= num2));  --输出：true
print("num1 > num2:"..tostring(num1 < num2));   --输出：false
print("num1 > num2:"..tostring(num1 <= num2));  --输出：false
print("num1 > num2:"..tostring(num1 == num2));  --输出：false
print("num1 > num2:"..tostring(num1 ~= num2));  --输出：true
print("-----逻辑运算符----------")
num3 = 100
num4 = 200
num5 = 300
print(num3 > num4 and num4 < num5)  -- output: false
print(num3 > num4 or num4 < num5)   -- output: true
print(not(num3 > num4))             -- output: true
print(not(nil))     -- output true
print(not(false))   -- output true
print(not("你好"))    --output false
print(not(123))     --output false
print(not(true))    --output false
--针对与带有"数字"与"字符串"的的逻辑判断使用短路规则（and 逻辑假短路规则 or 逻辑真短路规则）
print("-------------短路规则测试----------")
print(10 and 20)    --output: 20
print(nil and 80)   --output nil
print(2 or 5)       --output 2
print(false or 10)  --output 10
print("你好" and 10)  --output 10
print("test" or 5)
print("-----------多重赋值------------")
n1,n2,n3 = 10,20,30
print(n1,n2,n3)
n4,n5,n6 = 40,50
print(n4,n5,n6)
n7,n8,n9 = 10,20,30,40
print(n7,n8,n9)
