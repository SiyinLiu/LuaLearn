---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2021/1/19 15:06
---
--[[
表(table)的定义
    Table是Lua的一种数据结构用来帮助我们创建不同的数据类型，如：数组、键值对集合等。
    表(数组)的基本特征与定义
        lua(数组）的下标可以是负数
        lua（数组）的长度可以动态改变（与C#中的固定长度不同），可以把lua数组认为是C#的List、Dictionary等集合类型。
    把Table当成一个"字典"集合来对待。也可以当成一个”数组“来对待，这要看如何来初始化表。
    Table集合，可以有”空表“、”直接声明定义表内容“、”声明表然后逐一赋值“等三种方式。
    Table集合，也可以定义成类似”数组“的定义方式，其访问，其访问可以使用下标进行访问。（注意：lua中没有数组的概念，就是表来表示。）
    访问table中的数据（”键值对“类型集合），可以直接用.符号访问，也可以使用中括号访问，但一定要加字符串！（否则会报错）
    Table中的索引都是从1开始的
    学习table中数值的修改方式
        规律：使用直接移除数组中数据，索引不会变化。
             使用table专用删除函数，索引会自动排序
             所以推荐table中数据的删除使用专门的函数处理
    表的初始化
        空表初始化
        数组类型表的初始化
        字典类型表的初始化 有规律”键值“对  无规律”键值“对
    表的构造与访问
        空表赋值与访问
        数组类型表的赋值与访问
        字典类型表的赋值与访问
            "键"值对访问
            "属性"访问
            注意：表（字典）的访问中，如果使用中括号一定要加双引号
]]
--定义一个简单的表
tabMyArray = {}
--输出
print(tabMyArray) --地址
--表的赋值
tabMyArray = {12,13,14}
print(tabMyArray) -- 地址
print(tabMyArray[1]) --使用下标输出 注意：这里的下标是从一开始的
print(tabMyArray[2]) --使用下标输出
print(tabMyArray[3]) --使用下标输出
--定义一个”数组“类型的表
print('=======定义一个”数组“类型的表======')
tabMyArray2 = {10,20,30,40,50} --相当于C#中的”数组“类型
print(tabMyArray[1])

--定义一个"键值对"类型的表
print('=======定义一个"键值对"类型的表======')
tabMyArray3 = {str1 = "张三",str2="李四",str3="王五"}
--输出
print(tabMyArray3["str1"]) --使用中括号输出
print(tabMyArray3.str2) --使用’.‘输出（类似C#中输出属性）
print(tabMyArray3.str3)
