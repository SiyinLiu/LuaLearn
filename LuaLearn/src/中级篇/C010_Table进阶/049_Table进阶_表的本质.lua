---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by siyin.liu.
--- DateTime: 2021/4/13 18:46
---
--[[
表的本质：
    Lua没有预定义类型，任何变量都可以包含任何类型的值。
    Table(表），可以表示各种数据结构：
        Table是Lua中主要的数据结构机制，可以作为其它数据结构的基础，具有强大的功能。
        基于Table可以以一种简单、统一和高效的方式来表示“数组”，“二维数组”、“键值对集合”、
        “链表”、“双向队列”和其他数据结构等。同时lua也通过table来表示“模块”、“对象”（OOP）等。
    Table在Lua中即不是“值”也不是“变量”，而是“对象”。
    Lua不会暗中产生Table的副本或创建新的Table，也不需要声明一个Table。
    Table是通过“构造表达式”完成的，最简单的构造表达式就是“{}”
    Table永远是“匿名的”，一个持有Table的变量与Table自身之间是没有固定关联性的。
    可以将Table认为是一种动态分配的对象，程序仅保存对他们的引用。（即：可以理解为指针）
    当程序没有对一个Table进行引用时，Lua的垃圾回收器最终会删除该Table，并复用它的内存。

]]
local myArray1 = {10,20,30,40,50,60}
local myArray2 = {"李宁","安踏","刘德华","爱奇艺"}
for i = 1, #myArray1 do
    print("myArray1 "..tostring(i)..":"..tostring(myArray1[i]))
end
for i = 1, table.getn(myArray2) do
    print("myArray2  "..tostring(i)..":"..myArray2[i])
end
print("=====下面是表的本质测试 可以将Table认为是一种动态分配的对象，程序仅保存对他们的引用。（即：可以理解为指针）======")
local myArray3 = myArray1
myArray1 = nil
for i = 1, #myArray3 do --能正确输出
    print("myArray3 "..tostring(i)..":"..tostring(myArray3[i]))
end

