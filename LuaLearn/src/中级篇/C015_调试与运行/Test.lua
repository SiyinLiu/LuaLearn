---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2021/9/1 14:23
---
function class( ... )
    local NewClass = {}
    NewClass.Declared = {}
    NewClass.DeclaredCount = 0
    local arg = {...}
    NewClass.__base_list = {}
    NewClass.__sub_list = {}
    for i = 1, #arg do
        table.insert( NewClass.__base_list, arg[i] )
        table.insert(arg[i].__sub_list,NewClass)
    end

    -- build base map
    local function BuildBaseMap(map, class)
        map[class] = 1
        for k,v in pairs(class.__base_list) do
            BuildBaseMap(map, v)
        end
    end

    NewClass.__base_map = {}
    BuildBaseMap(NewClass.__base_map, NewClass)

    local __objmt_class = {}

    local __objmt_class_with_member = {}

    function __objmt_class_with_member.__index(tbl, key)
        local f = NewClass[key]
        if( is_class_member( f ) )then
            return f( tbl, nil )
        end
        return f
    end

    if CLASS_INDEX_CHECK then
        local function check_memeber(my_class, tbl, key)
            if my_class.Declared[key] or my_class[key] then
                return
            end
            if type(key) == "number" then
                return
            end
            if type(key) == "string" then
                if string.sub(key, 1, 1) == "_" then
                    return
                end
                if string.sub(key, -8) == "_hObject" then
                    return
                end
            end

            error( "ERROR INDEX AFTER Ctor():\t" .. tostring(tbl) .. "\tget " .. tostring(key) )
        end

        function __objmt_class.__index(tbl, key)
            check_memeber(NewClass, tbl, key)
            return NewClass[key]
        end
    else
        __objmt_class.__index = NewClass
    end

    if CLASS_NEWINDEX_CHECK then
        local function check_new_memeber(my_class, tbl, key, value)
            if not my_class.Declared[key] and type(value) ~= "function" and type(key) ~= "number" then
                print("RegistClassMember(" ..  GetClassName(my_class) .. ", \"" .. key    .. "\")")
                error("ERROR NEWINDEX AFTER Ctor():\t" .. tostring(tbl) .. "\tset " .. tostring(key) .."\tto " .. tostring(value) )
            end
        end

        function __objmt_class.__newindex(tbl, key, value)
            check_new_memeber(NewClass, tbl, key, value)
            rawset(tbl, key, value)
        end

        function __objmt_class_with_member.__newindex(tbl, key, value)
            local f = NewClass and NewClass[key]
            if( is_class_member( f ) )then
                f( tbl, value )
                return
            end
            check_new_memeber(NewClass, tbl, key, value)
            rawset(tbl, key, value)
        end
    else
        function __objmt_class_with_member.__newindex(tbl, key, value)
            local f = NewClass and NewClass[key]
            if( is_class_member( f ) )then
                f( tbl, value )
                return
            end
            rawset(tbl, key, value)
        end
    end

    NewClass.__objmt_class = __objmt_class
    NewClass.__objmt_class_with_member = __objmt_class_with_member

    NewClass.objmt = __objmt_class

    NewClass.IsType = function( self, c )
        return ( self.__class == c )
    end

    NewClass.ctor = function( self, Instance , ...)
        for i,base_class in ipairs(self.__base_list) do
            if base_class.__engine_class then
                base_class.ctor( base_class, Instance)
            else
                base_class.ctor( base_class, Instance, ...)
            end
        end

        local _Ctor = rawget(self, "Ctor")
        if _Ctor then
            _Ctor(Instance, ...)
        end
    end

    NewClass.new = function( self, ... )
        local NewInstance = CreateTable_lua(0, self.DeclaredCount+1)
        NewInstance.__class = self
        setmetatable( NewInstance, __objmt_class )
        self.ctor( self, NewInstance , ...)
        return NewInstance
    end

    __AllClasses = __AllClasses or {}
    table.insert( __AllClasses, NewClass )

    return NewClass
end